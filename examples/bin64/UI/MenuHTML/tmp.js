// Generated by CoffeeScript 1.10.0
var Clothing, Group, MainBar, NULL, OnlinePlayers, Player, Teleport, TwAdd, TwAddButton, TwAddSeparator, TwAddVarCB, TwAddVarRW, TwDefine, TwNewBar, TwSetParam, Vehicle, Weapon, __mainBar, cb, ccb, isString, isTwInitialized, mainBar, opcb, twDefStr, unquote, vcb, wcb,
  slice = [].slice,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

isString = function(s) {
  return toString.call(s) === '[object String]';
};

unquote = function(s) {
  var len;
  while (true) {
    len = s.length;
    if (s.length > 1 && s[0] === s[len - 1] && s[0] < 'A') {
      s = s.substring(1, len - 1);
    } else {
      return s;
    }
  }
};

NULL = null;

TwNewBar = (function() {
  TwNewBar.list = [];

  TwNewBar.add = function() {
    var __type, varargs;
    __type = arguments[0], varargs = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    return (this.list.push((function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(this, [this.list.length, __type].concat(slice.call(varargs)), function(){}))) - 1;
  };

  function TwNewBar(_id, _type1, o1, _title, b1, c1, d1, e1, f1, g1, h1, m1) {
    this._id = _id;
    this._type = _type1;
    this.o = o1;
    this._title = _title;
    this.b = b1;
    this.c = c1;
    this.d = d1;
    this.e = e1;
    this.f = f1;
    this.g = g1;
    this.h = h1;
    this.m = m1;
    if (this._title) {
      this.o.title = this._title;
    }
    if (this._type) {
      this.o.Type = this._type;
    }
    if (this.o && this.o.groupInstance && this.o.groupInstance.constructor) {
      this.o.groupInstance.add(this._type, this.o, this.b, this.c, this.d, this.e, this.f, this.g, this.m);
    }
  }

  return TwNewBar;

})();

Group = (function(superClass) {
  extend(Group, superClass);

  Group.list = [];

  Group.addQuiet = function(o) {
    return this.list.push(o);
  };

  Group.add = function(a, b, c, d, e, f, g, h, m) {
    return (this.list.push(new this(this.list.length, a, b, c, d, e, f, g, h, m))) - 1;
  };

  function Group(_id, a1, b1, c1, d1, e1, f1, g1, h1, m1) {
    this._id = _id;
    this.a = a1;
    this.b = b1;
    this.c = c1;
    this.d = d1;
    this.e = e1;
    this.f = f1;
    this.g = g1;
    this.h = h1;
    this.m = m1;
    this.list = [];
    if (this._id && this._id instanceof Object) {
      console.log("constructor adding", this._id);
      Group.getInstanceByClassName('MainBar').add('Menu', {
        Type: "Menu",
        title: this.constructor.name,
        menu: this
      });
    }
    this.addQuiet(this);
  }

  Group.prototype.add = function() {
    var _type, o, varargs;
    _type = arguments[0], o = arguments[1], varargs = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    return this.list.push(o);
  };

  Group.prototype.addQuiet = function(o) {
    return this.constructor.addQuiet(o);
  };

  Group.prototype.getName = function() {
    return this.constructor.name;
  };

  Group.getName = function() {
    return this.name;
  };

  Group.getter = function(v) {
    return "getclass=" + this.name + " getmethod=" + v;
  };

  Group.setter = function(v) {
    return "setclass=" + this.name + " setmethod=" + v;
  };

  Group.item = function(v) {
    return "itemclass=" + this.name + " itemmethod=" + v;
  };

  Group.getInstanceByClassName = function(className) {
    var i, len1, matches, name, ref;
    ref = this.list;
    for (i = 0, len1 = ref.length; i < len1; i++) {
      name = ref[i];
      if (name.getName() === className) {
        matches = name;
      }
    }
    return matches;
  };

  return Group;

})(TwNewBar);

MainBar = (function(superClass) {
  extend(MainBar, superClass);

  function MainBar() {
    return MainBar.__super__.constructor.apply(this, arguments);
  }

  return MainBar;

})(Group);

Player = (function(superClass) {
  extend(Player, superClass);

  function Player() {
    return Player.__super__.constructor.apply(this, arguments);
  }

  return Player;

})(Group);

OnlinePlayers = (function(superClass) {
  extend(OnlinePlayers, superClass);

  function OnlinePlayers() {
    return OnlinePlayers.__super__.constructor.apply(this, arguments);
  }

  return OnlinePlayers;

})(Group);

Clothing = (function(superClass) {
  extend(Clothing, superClass);

  function Clothing() {
    return Clothing.__super__.constructor.apply(this, arguments);
  }

  return Clothing;

})(Group);

Weapon = (function(superClass) {
  extend(Weapon, superClass);

  function Weapon() {
    return Weapon.__super__.constructor.apply(this, arguments);
  }

  return Weapon;

})(Group);

Vehicle = (function(superClass) {
  extend(Vehicle, superClass);

  function Vehicle() {
    return Vehicle.__super__.constructor.apply(this, arguments);
  }

  return Vehicle;

})(Group);

Teleport = (function(superClass) {
  extend(Teleport, superClass);

  function Teleport() {
    return Teleport.__super__.constructor.apply(this, arguments);
  }

  return Teleport;

})(Group);

window.TwNewBar = TwNewBar;

TwAdd = function() {
  var __type, args, chunk, i, id, k, key, len1, o, pair, split, val, value, varargs;
  __type = arguments[0], o = arguments[1], varargs = 3 <= arguments.length ? slice.call(arguments, 2) : [];
  args = {
    bar: o
  };
  for (key = i = 0, len1 = varargs.length; i < len1; key = ++i) {
    value = varargs[key];
    if (isString(value)) {
      varargs[key] = value.trim();
      split = value.split(/(group=| )/, 3);
      split = value.split(/(\w+=\w+|\w+='[^']+')/);
      while (split.length > 1) {
        console.log(split.length, split);
        chunk = split.shift().trim();
        if (!chunk) {
          continue;
        }
        if (indexOf.call(chunk, '=') >= 0) {
          pair = chunk.split('=');
          if (pair.length !== 2) {
            throw "Pair isn't two for " + chunk;
          }
          val = unquote(pair[1]);
          k = pair[0];
          args[k] = val;
          if (k === 'group') {
            args.groupInstance = Group.getInstanceByClassName(val);
          }
        }
      }
    }
  }
  return id = TwNewBar.add.apply(TwNewBar, [__type, args].concat(slice.call(varargs)));
};

TwAddVarCB = TwAdd.bind(null, 'VarCB');

TwAddVarRW = TwAdd.bind(null, 'VarRW');

TwAddButton = TwAdd.bind(null, 'Button');

TwAddSeparator = TwAdd.bind(null, 'Seperator');

TwSetParam = function() {};

TwDefine = function() {};


/*
 *


_.chain(Group.list)
  .map(function(list) {
    return list.constructor.name 
         + ": " 
         + Group
             .getInstanceByClassName( 
                list.constructor.name 
             )
             .list
             .length;
})
.value();

["OnlinePlayers: 5", "Player: 25", "Clothing: 61", "Weapon: 51", "Vehicle: 28"]
 */


/*
      1 TwBar
      1 TwDefineEnum
      1 TwInitialized
      2 TwNewBar
      3 TwDefine
      9 TwSetParam
     17 TwAddVarRW
     42 TwAddButton
     42 TwAddSeparator
     98 TwAddVarCB
 */


/* Classes:
 * TwNewBar
		char twDefStr[4098];
class OnlinePlayers
class Player
class Clothing
class Weapon
class Vehicle
class Teleport
 */


/* 
 * regexes: 

make classes out of 'OnlinePlayers opcb;'
%s/^\s\+\(\w\+\) \(\w\+\);/\2 = new \1;
%s/\(\w\+\)::\(\w\+\)\(.*\)\(\w\+\)::\(\w\+\), &/\1.getter("\2")\3\4.setter("\5"), 
%s/^\s\+int.*= 0/\/\/&
%s/TwSetParam\(.*\)&\(.*\))/TwSetParam\1"\2")
%s/&\(\w\)/\1
%s/TW_\w\+/'&'/g
%s/OnlinePlayers/OnlinePlayers/g
%s/OnlinePlayers/OnlinePlayers/g
 */

__mainBar = new TwNewBar('Authority');

twDefStr = ' Authority label=\'Authority\' movable=true resizable=true color=\'%i %i %i\' position=\'%i %i\' alpha=%i text=light size=\'%i %i\' valueswidth=160 alwaystop=true';

TwDefine(twDefStr);

mainBar = new MainBar;

opcb = new OnlinePlayers(MainBar);

cb = new Player(MainBar);

ccb = new Clothing(MainBar);

wcb = new Weapon(MainBar);

vcb = new Vehicle(MainBar);

TwAddButton(mainBar, 'Invisible', Vehicle.item('TFixVehicle'), NULL, 'group=Player ');

TwAddButton(mainBar, 'Give Player Weapons', OnlinePlayers.item('TPlayer0'), NULL, 'group=OnlinePlayers ');

TwAddButton(mainBar, 'Player Gravity', Player.item('TNativeTest'), NULL, 'group=Player ');

TwAddButton(mainBar, 'Refresh List', OnlinePlayers.item('TRefreshList'), NULL, 'group=OnlinePlayers ');

TwAddButton(mainBar, 'Teleport to Player', OnlinePlayers.item('TTPPlayer0'), NULL, 'group=OnlinePlayers ');

TwAddSeparator(mainBar, NULL, ' group=\'Player\' ');

TwAddVarCB(mainBar, 'Index', 'TW_TYPE_INT32', OnlinePlayers.getter('SetCurrentOPlayerCallback'), OnlinePlayers.setter('GetCurrentOPlayerCallback'), opcb, ' min=0 max=30 group=OnlinePlayers');

TwAddVarCB(mainBar, 'Name', 'TW_TYPE_STDSTRING', OnlinePlayers.getter('SetMyStdStringCB'), OnlinePlayers.setter('GetMyStdStringCB'), opcb, 'group=OnlinePlayers');

TwAddVarCB(mainBar, 'Z Coord', 'TW_TYPE_FLOAT', Player.getter('SetZCoordCallback'), Player.setter('GetZCoordCallback'), cb, 'group=Player');

TwSetParam(mainBar, 'OnlinePlayers', 'opened', 'TW_PARAM_INT32', 1, 'player_opened');

TwAddButton(mainBar, 'Enable Invincibility', Player.item('TEnableGodMode'), NULL, 'group=Player ');

TwAddButton(mainBar, 'Disable Invincibility', Player.item('TDisableGodMode'), NULL, 'group=Player ');

TwAddSeparator(mainBar, NULL, ' group=\'Player\' ');

TwAddButton(mainBar, 'Enable Off The Radar', Player.item('TEnableOTR'), NULL, 'group=Player ');

TwAddButton(mainBar, 'Disable Off The Radar', Player.item('TDisableOTR'), NULL, 'group=Player ');

TwAddSeparator(mainBar, NULL, ' group=\'Player\' ');

TwAddButton(mainBar, 'Enable No Ragdoll', Player.item('TEnableNoRD'), NULL, 'group=Player ');

TwAddButton(mainBar, 'Disable No Ragdoll', Player.item('TDisableNoRD'), NULL, 'group=Player ');

TwAddSeparator(mainBar, NULL, ' group=\'Player\' ');

TwAddVarRW(mainBar, 'Super Jump', 'TW_TYPE_BOOLCPP', Player.item('superjump'), 'group=Player');

TwAddVarRW(mainBar, 'Never Wanted', 'TW_TYPE_BOOLCPP', Player.item('neverwanted'), 'group=Player');

TwAddVarRW(mainBar, 'RP Loop', 'TW_TYPE_BOOLCPP', Player.item('rp'), 'group=Player');

TwAddSeparator(mainBar, NULL, ' group=\'Player\' ');

TwAddVarCB(mainBar, 'Health', 'TW_TYPE_FLOAT', Player.getter('SetHealthCallback'), Player.setter('GetHealthCallback'), cb, 'group=Player');

TwAddVarCB(mainBar, 'Max Health', 'TW_TYPE_FLOAT', Player.getter('SetMaxHealthCallback'), Player.setter('GetMaxHealthCallback'), cb, 'group=Player');

TwAddVarCB(mainBar, 'Armor', 'TW_TYPE_FLOAT', Player.getter('SetArmorCallback'), Player.setter('GetArmorCallback'), cb, 'group=Player');

TwAddVarCB(mainBar, 'Stamina', 'TW_TYPE_FLOAT', Player.getter('SetStaminaCallback'), Player.setter('GetStaminaCallback'), cb, 'group=Player');

TwAddVarCB(mainBar, 'Max Stamina', 'TW_TYPE_FLOAT', Player.getter('SetMaxStaminaCallback'), Player.setter('GetMaxStaminaCallback'), cb, 'group=Player');

TwAddVarCB(mainBar, 'Move Speed', 'TW_TYPE_FLOAT', Player.getter('SetSpeedCallback'), Player.setter('GetSpeedCallback'), cb, 'group=Player');

TwAddVarCB(mainBar, 'Swim Speed', 'TW_TYPE_FLOAT', Player.getter('SetSwimSpeedCallback'), Player.setter('GetSwimSpeedCallback'), cb, 'group=Player');

TwAddVarCB(mainBar, 'Damage Taken', 'TW_TYPE_FLOAT', Player.getter('SetDamageTakenCallback'), Player.setter('GetDamageTakenCallback'), cb, 'group=Player');

TwSetParam(mainBar, 'Player', 'opened', 'TW_PARAM_INT32', 1, 'player_opened');

TwAddVarRW(mainBar, 'Outfit', 'outfitType', 'current_outfit', 'group=Clothing ');

TwAddSeparator(mainBar, NULL, ' group=\'Clothing\' ');

TwAddVarCB(mainBar, 'Hat', 'TW_TYPE_INT32', Clothing.getter('SetHatCallback'), Clothing.setter('GetHatCallback'), ccb, ' min=0 max=55 group=Clothing');

TwAddVarCB(mainBar, 'Hat Texture', 'TW_TYPE_INT32', Clothing.getter('SetHatExCallback'), Clothing.setter('GetHatExCallback'), ccb, ' min=0 max=10 group=Clothing');

TwAddButton(mainBar, 'Set Hat', Clothing.item('THats'), NULL, 'group=Clothing');

TwAddSeparator(mainBar, NULL, ' group=\'Clothing\' ');

TwAddVarCB(mainBar, 'Glasses', 'TW_TYPE_INT32', Clothing.getter('SetGlassCallback'), Clothing.setter('GetGlassCallback'), ccb, ' min=0 max=23 group=Clothing');

TwAddVarCB(mainBar, 'Glasses Texture', 'TW_TYPE_INT32', Clothing.getter('SetGlassExCallback'), Clothing.setter('GetGlassExCallback'), ccb, ' min=0 max=10 group=Clothing');

TwAddButton(mainBar, 'Set Glasses', Clothing.item('TGlass'), NULL, 'group=Clothing');

TwAddSeparator(mainBar, NULL, ' group=\'Clothing\' ');

TwAddVarCB(mainBar, 'Earrings/Headpiece', 'TW_TYPE_INT32', Clothing.getter('SetEarCallback'), Clothing.setter('GetEarCallback'), ccb, ' min=0 max=3 group=Clothing');

TwAddVarCB(mainBar, 'Earrings/Headpiece Texture', 'TW_TYPE_INT32', Clothing.getter('SetEarExCallback'), Clothing.setter('GetEarExCallback'), ccb, ' min=0 max=10 group=Clothing');

TwAddButton(mainBar, 'Set Earrings/Headpiece', Clothing.item('TEars'), NULL, 'group=Clothing');

TwAddSeparator(mainBar, NULL, ' group=\'Clothing\' ');

TwAddVarCB(mainBar, 'Face', 'TW_TYPE_INT32', Clothing.getter('SetFaceCallback'), Clothing.setter('GetFaceCallback'), ccb, ' min=0 max=50 group=Clothing');

TwAddVarCB(mainBar, 'Face Texture', 'TW_TYPE_INT32', Clothing.getter('SetFaceExCallback'), Clothing.setter('GetFaceExCallback'), ccb, ' min=0 max=10 group=Clothing');

TwAddButton(mainBar, 'Set Face', Clothing.item('TFace'), NULL, 'group=Clothing');

TwAddSeparator(mainBar, NULL, ' group=\'Clothing\' ');

TwAddVarCB(mainBar, 'Mask', 'TW_TYPE_INT32', Clothing.getter('SetMaskCallback'), Clothing.setter('GetMaskCallback'), ccb, ' min=0 max=55 group=Clothing');

TwAddVarCB(mainBar, 'Mask Texture', 'TW_TYPE_INT32', Clothing.getter('SetMaskExCallback'), Clothing.setter('GetMaskExCallback'), ccb, ' min=0 max=10 group=Clothing');

TwAddButton(mainBar, 'Set Mask', Clothing.item('TMask'), NULL, 'group=Clothing');

TwAddSeparator(mainBar, NULL, ' group=\'Clothing\' ');

TwAddVarCB(mainBar, 'Hair', 'TW_TYPE_INT32', Clothing.getter('SetHairCallback'), Clothing.setter('GetHairCallback'), ccb, ' min=0 max=55 group=Clothing');

TwAddVarCB(mainBar, 'Hair Texture', 'TW_TYPE_INT32', Clothing.getter('SetHairExCallback'), Clothing.setter('GetHairExCallback'), ccb, ' min=0 max=10 group=Clothing');

TwAddButton(mainBar, 'Set Hair', Clothing.item('THair'), NULL, 'group=Clothing');

TwAddSeparator(mainBar, NULL, ' group=\'Clothing\' ');

TwAddVarCB(mainBar, 'Torso', 'TW_TYPE_INT32', Clothing.getter('SetTorsoCallback'), Clothing.setter('GetTorsoCallback'), ccb, ' min=0 max=50 group=Clothing');

TwAddVarCB(mainBar, 'Torso Texture', 'TW_TYPE_INT32', Clothing.getter('SetTorsoExCallback'), Clothing.setter('GetTorsoExCallback'), ccb, ' min=0 max=10 group=Clothing');

TwAddButton(mainBar, 'Set Torso', Clothing.item('THats'), NULL, 'group=Clothing ');

TwAddSeparator(mainBar, NULL, ' group=\'Clothing\' ');

TwAddVarCB(mainBar, 'Pants', 'TW_TYPE_INT32', Clothing.getter('SetLegsCallback'), Clothing.setter('GetLegsCallback'), ccb, ' min=0 max=50 group=Clothing');

TwAddVarCB(mainBar, 'Pants Texture', 'TW_TYPE_INT32', Clothing.getter('SetLegsExCallback'), Clothing.setter('GetLegsExCallback'), ccb, ' min=0 max=10 group=Clothing');

TwAddButton(mainBar, 'Set Pants', Clothing.item('TLegs'), NULL, 'group=Clothing ');

TwAddSeparator(mainBar, NULL, ' group=\'Clothing\' ');

TwAddVarCB(mainBar, 'Hands', 'TW_TYPE_INT32', Clothing.getter('SetHandsCallback'), Clothing.setter('GetHandsCallback'), ccb, ' min=0 max=50 group=Clothing');

TwAddVarCB(mainBar, 'Hands Texture', 'TW_TYPE_INT32', Clothing.getter('SetHandsExCallback'), Clothing.setter('GetHandsExCallback'), ccb, ' min=0 max=10 group=Clothing');

TwAddButton(mainBar, 'Set 5', Clothing.item('THands'), NULL, 'group=Clothing ');

TwAddSeparator(mainBar, NULL, ' group=\'Clothing\' ');

TwAddVarCB(mainBar, 'Shoes', 'TW_TYPE_INT32', Clothing.getter('SetTextureCallback'), Clothing.setter('GetTextureCallback'), ccb, ' min=0 max=50 group=Clothing');

TwAddVarCB(mainBar, 'Shoes Texture', 'TW_TYPE_INT32', Clothing.getter('SetTextureExCallback'), Clothing.setter('GetTextureExCallback'), ccb, ' min=0 max=10 group=Clothing');

TwAddButton(mainBar, 'Set Shoes', Clothing.item('TTexture'), NULL, 'group=Clothing ');

TwAddSeparator(mainBar, NULL, ' group=\'Clothing\' ');

TwAddVarCB(mainBar, 'Neck', 'TW_TYPE_INT32', Clothing.getter('SetShoesCallback'), Clothing.setter('GetShoesCallback'), ccb, ' min=0 max=50 group=Clothing');

TwAddVarCB(mainBar, 'Neck Texture', 'TW_TYPE_INT32', Clothing.getter('SetShoesExCallback'), Clothing.setter('GetShoesExCallback'), ccb, ' min=0 max=10 group=Clothing');

TwAddButton(mainBar, 'Set Neck', Clothing.item('TShoes'), NULL, 'group=Clothing ');

TwAddSeparator(mainBar, NULL, ' group=\'Clothing\' ');

TwAddVarCB(mainBar, 'Shirt', 'TW_TYPE_INT32', Clothing.getter('SetSpecial1Callback'), Clothing.setter('GetSpecial1Callback'), ccb, ' min=0 max=50 group=Clothing');

TwAddVarCB(mainBar, 'Shirt Texture', 'TW_TYPE_INT32', Clothing.getter('SetSpecial1ExCallback'), Clothing.setter('GetSpecial1ExCallback'), ccb, ' min=0 max=10 group=Clothing');

TwAddButton(mainBar, 'Set Shirt', Clothing.item('TSpecial1'), NULL, 'group=Clothing ');

TwAddSeparator(mainBar, NULL, ' group=\'Clothing\' ');

TwAddVarCB(mainBar, 'Armor', 'TW_TYPE_INT32', Clothing.getter('SetSpecial2Callback'), Clothing.setter('GetSpecial2Callback'), ccb, ' min=0 max=50 group=Clothing');

TwAddVarCB(mainBar, 'Armor Texture', 'TW_TYPE_INT32', Clothing.getter('SetSpecial2ExCallback'), Clothing.setter('GetSpecial2ExCallback'), ccb, ' min=0 max=10 group=Clothing');

TwAddButton(mainBar, 'Set Armor', Clothing.item('TSpecial2'), NULL, 'group=Clothing ');

TwAddSeparator(mainBar, NULL, ' group=\'Clothing\' ');

TwAddVarCB(mainBar, 'Emblem', 'TW_TYPE_INT32', Clothing.getter('SetSpecial3Callback'), Clothing.setter('GetSpecial3Callback'), ccb, ' min=0 max=100 group=Clothing');

TwAddVarCB(mainBar, 'Emblem Texture', 'TW_TYPE_INT32', Clothing.getter('SetSpecial3ExCallback'), Clothing.setter('GetSpecial3ExCallback'), ccb, ' min=0 max=10 group=Clothing');

TwAddButton(mainBar, 'Set Emblem', Clothing.item('TSpecial3'), NULL, 'group=Clothing ');

TwAddSeparator(mainBar, NULL, ' group=\'Clothing\' ');

TwAddVarCB(mainBar, 'Jacket', 'TW_TYPE_INT32', Clothing.getter('SetTorso2Callback'), Clothing.setter('GetTorso2Callback'), ccb, ' min=0 max=100 group=Clothing');

TwAddVarCB(mainBar, 'Jacket Texture', 'TW_TYPE_INT32', Clothing.getter('SetTorso2ExCallback'), Clothing.setter('GetTorso2ExCallback'), ccb, ' min=0 max=10 group=Clothing');

TwAddButton(mainBar, 'Set Jacket', Clothing.item('TTorso2'), NULL, 'group=Clothing ');

TwSetParam(mainBar, 'Clothing', 'opened', 'TW_PARAM_INT32', 1, 'clothing_opened');

TwAddButton(mainBar, 'Fill Ammo', Weapon.item('FillWeapon'), NULL, 'group=Weapon ');

TwAddButton(mainBar, 'Unlimited Ammo', Weapon.item('TUClip'), NULL, 'group=Weapon ');

TwAddButton(mainBar, 'Give Weapons', Weapon.item('TGiveWeapons'), NULL, 'group=Weapon ');

TwAddSeparator(mainBar, NULL, ' group=\'Weapon\' ');

TwAddVarRW(mainBar, 'Explosive Melee', 'TW_TYPE_BOOLCPP', Weapon.item('explosivemelee'), 'group=Weapon');

TwAddVarRW(mainBar, 'Explosive Ammo', 'TW_TYPE_BOOLCPP', Weapon.item('explosiveammo'), 'group=Weapon');

TwAddVarRW(mainBar, 'Fire Ammo', 'TW_TYPE_BOOLCPP', Weapon.item('fireammo'), 'group=Weapon');

TwAddSeparator(mainBar, NULL, ' group=\'Weapon\' ');

TwAddVarCB(mainBar, 'Clip Size', 'TW_TYPE_INT32', Weapon.getter('SetClipSizeCallback'), Weapon.setter('GetClipSizeCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Accuracy Spread', 'TW_TYPE_FLOAT', Weapon.getter('SetAccuracySpreadCallback'), Weapon.setter('GetAccuracySpreadCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Accurate Mode Accuracy Modifier', 'TW_TYPE_FLOAT', Weapon.getter('SetAccurateModeAccuracyModifierCallback'), Weapon.setter('GetAccurateModeAccuracyModifierCallback'), wcb, 'group=Weapon');

TwAddSeparator(mainBar, NULL, ' group=\'Weapon\' ');

TwAddVarCB(mainBar, 'Run and Gun Accuracy Modifier', 'TW_TYPE_FLOAT', Weapon.getter('SetRunAndGunAccuracyModifierCallback'), Weapon.setter('GetRunAndGunAccuracyModifierCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Run and Gun Accuracy Min Override', 'TW_TYPE_FLOAT', Weapon.getter('SetRunAndGunAccuracyMinOverrideCallback'), Weapon.setter('GetRunAndGunAccuracyMinOverrideCallback'), wcb, 'group=Weapon');

TwAddSeparator(mainBar, NULL, ' group=\'Weapon\' ');

TwAddVarCB(mainBar, 'Recoil Accuracy Max', 'TW_TYPE_FLOAT', Weapon.getter('SetRecoilAccuracyMaxCallback'), Weapon.setter('GetRecoilAccuracyMaxCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Recoil Error Time', 'TW_TYPE_FLOAT', Weapon.getter('SetRecoilErrorTimeCallback'), Weapon.setter('GetRecoilErrorTimeCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Recoil Recovery Rate', 'TW_TYPE_FLOAT', Weapon.getter('SetRecoilRecoveryRateCallback'), Weapon.setter('GetRecoilRecoveryRateCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Recoil Accuracy To Allow HeadShot Distance Player', 'TW_TYPE_FLOAT', Weapon.getter('SetRecoilAccuracyToAllowHeadShotDistancePlayerCallback'), Weapon.setter('GetRecoilAccuracyToAllowHeadShotDistancePlayerCallback'), wcb, 'group=Weapon');

TwAddSeparator(mainBar, NULL, ' group=\'Weapon\' ');

TwAddVarCB(mainBar, 'Min HeadShot Distance Player', 'TW_TYPE_FLOAT', Weapon.getter('SetMinHeadShotDistancePlayerCallback'), Weapon.setter('GetMinHeadShotDistancePlayerCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Max HeadShot Distance Player', 'TW_TYPE_FLOAT', Weapon.getter('SetMaxHeadShotDistancePlayerCallback'), Weapon.setter('GetMaxHeadShotDistancePlayerCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'HeadShot Damage Modifier Player', 'TW_TYPE_FLOAT', Weapon.getter('SetHeadShotDamageModifierPlayerCallback'), Weapon.setter('GetHeadShotDamageModifierPlayerCallback'), wcb, 'group=Weapon');

TwAddSeparator(mainBar, NULL, ' group=\'Weapon\' ');

TwAddVarCB(mainBar, 'Damage', 'TW_TYPE_FLOAT', Weapon.getter('SetDamageCallback'), Weapon.setter('GetDamageCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Force', 'TW_TYPE_FLOAT', Weapon.getter('SetForceCallback'), Weapon.setter('GetForceCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Force Hit Ped', 'TW_TYPE_FLOAT', Weapon.getter('SetForceHitPedCallback'), Weapon.setter('GetForceHitPedCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Force Hit Vehicle', 'TW_TYPE_FLOAT', Weapon.getter('SetForceHitVehicleCallback'), Weapon.setter('GetForceHitVehicleCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Force Hit Flying Heli', 'TW_TYPE_FLOAT', Weapon.getter('SetForceHitFlyingHeliCallback'), Weapon.setter('GetForceHitFlyingHeliCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Force Mass Strength Multi', 'TW_TYPE_FLOAT', Weapon.getter('SetForceMassStrengthMultCallback'), Weapon.setter('GetForceMassStrengthMultCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Force Falloff Range Start', 'TW_TYPE_FLOAT', Weapon.getter('SetForceFalloffRangeStartCallback'), Weapon.setter('GetForceFalloffRangeStartCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Force Falloff Range End', 'TW_TYPE_FLOAT', Weapon.getter('SetForceFalloffRangeEndCallback'), Weapon.setter('GetForceFalloffRangeEndCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Force Falloff Min', 'TW_TYPE_FLOAT', Weapon.getter('SetForceFalloffMinCallback'), Weapon.setter('GetForceFalloffMinCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Projectile Force', 'TW_TYPE_FLOAT', Weapon.getter('SetProjectileForceCallback'), Weapon.setter('GetProjectileForceCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Frag Impulse', 'TW_TYPE_FLOAT', Weapon.getter('SetFragImpulseCallback'), Weapon.setter('GetFragImpulseCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Penetration', 'TW_TYPE_FLOAT', Weapon.getter('SetPenetrationCallback'), Weapon.setter('GetPenetrationCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Bullets In Batch', 'TW_TYPE_INT32', Weapon.getter('SetBulletsInBatchCallback'), Weapon.setter('GetBulletsInBatchCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Batch Spread', 'TW_TYPE_FLOAT', Weapon.getter('SetBatchSpreadCallback'), Weapon.setter('GetBatchSpreadCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Time Between Shots', 'TW_TYPE_FLOAT', Weapon.getter('SetTimeBetweenShotsCallback'), Weapon.setter('GetTimeBetweenShotsCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Time Left Between Shots Cached Fired', 'TW_TYPE_FLOAT', Weapon.getter('SetTimeLeftBetweenShotsWhereShouldFireIsCachedCallback'), Weapon.setter('GetTimeLeftBetweenShotsWhereShouldFireIsCachedCallback'), wcb, 'group=Weapon');

TwAddSeparator(mainBar, NULL, ' group=\'Weapon\' ');

TwAddVarCB(mainBar, 'Tracer Fx Chance SP', 'TW_TYPE_FLOAT', Weapon.getter('SetTracerFxChanceSPCallback'), Weapon.setter('GetTracerFxChanceSPCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Tracer Fx Chance MP', 'TW_TYPE_FLOAT', Weapon.getter('SetTracerFxChanceMPCallback'), Weapon.setter('GetTracerFxChanceMPCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Flash Fx Chance SP', 'TW_TYPE_FLOAT', Weapon.getter('SetFlashFxChanceSPCallback'), Weapon.setter('GetFlashFxChanceSPCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Flash Fx Chance MP', 'TW_TYPE_FLOAT', Weapon.getter('SetFlashFxChanceMPCallback'), Weapon.setter('GetFlashFxChanceMPCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Flash Fx Scale', 'TW_TYPE_FLOAT', Weapon.getter('SetFlashFxScaleCallback'), Weapon.setter('GetFlashFxScaleCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Lock On Range', 'TW_TYPE_FLOAT', Weapon.getter('SetLockOnRangeCallback'), Weapon.setter('GetLockOnRangeCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Weapon Range', 'TW_TYPE_FLOAT', Weapon.getter('SetWeaponRangeCallback'), Weapon.setter('GetWeaponRangeCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Damage FallOff Range Min', 'TW_TYPE_FLOAT', Weapon.getter('SetDamageFallOffRangeMinCallback'), Weapon.setter('GetDamageFallOffRangeMinCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Damage FallOff Range Max', 'TW_TYPE_FLOAT', Weapon.getter('SetDamageFallOffRangeMaxCallback'), Weapon.setter('GetDamageFallOffRangeMaxCallback'), wcb, 'group=Weapon');

TwAddVarCB(mainBar, 'Damage FallOff Modifier', 'TW_TYPE_FLOAT', Weapon.getter('SetDamageFallOffModifierCallback'), Weapon.setter('GetDamageFallOffModifierCallback'), wcb, 'group=Weapon');

TwSetParam(mainBar, 'Weapon', 'opened', 'TW_PARAM_INT32', 1, 'weapon_opened');

TwAddButton(mainBar, 'Fix Vehicle', Vehicle.item('TSpawnVehicle'), NULL, 'group=Vehicle ');

TwAddSeparator(mainBar, NULL, ' group=\'Vehicle\' ');

TwAddButton(mainBar, 'Enable Vehicle Invincibility', Vehicle.item('TEnableVGodMode'), NULL, 'group=Vehicle ');

TwAddButton(mainBar, 'Disable Vehicle Invincibility', Vehicle.item('TDisableVGodMode'), NULL, 'group=Vehicle ');

TwAddSeparator(mainBar, NULL, ' group=\'Vehicle\' ');

TwAddVarRW(mainBar, 'Bulletproof Tires', 'TW_TYPE_BOOLCPP', Vehicle.item('bptires'), 'group=Vehicle');

TwAddSeparator(mainBar, NULL, ' group=\'Vehicle\' ');

TwAddVarCB(mainBar, 'Acceleration', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleSpeedCallback'), Vehicle.setter('GetVehicleSpeedCallback'), vcb, 'group=Vehicle');

TwAddVarCB(mainBar, 'Mass', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleMassCallback'), Vehicle.setter('GetVehicleMassCallback'), vcb, 'group=Vehicle');

TwAddVarCB(mainBar, 'Gravity', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleGravityCallback'), Vehicle.setter('GetVehicleGravityCallback'), vcb, 'group=Vehicle');

TwAddSeparator(mainBar, NULL, ' group=\'Vehicle\' ');

TwAddVarCB(mainBar, 'Initial Drive Force', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleInitialDriveForceCallback'), Vehicle.setter('GetVehicleInitialDriveForceCallback'), vcb, 'group=Vehicle');

TwAddVarCB(mainBar, 'Steering Lock', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleSteringCallback'), Vehicle.setter('GetVehicleSteringCallback'), vcb, 'group=Vehicle');

TwAddVarCB(mainBar, 'Brake Force', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleBrakeForceCallback'), Vehicle.setter('GetVehicleBrakeForceCallback'), vcb, 'group=Vehicle');

TwAddVarCB(mainBar, 'Suspension Force', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleSuspensionForceCallback'), Vehicle.setter('GetVehicleSuspensionForceCallback'), vcb, 'group=Vehicle');

TwAddSeparator(mainBar, NULL, ' group=\'Vehicle\' ');

TwAddVarCB(mainBar, 'Center of Mass X', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleCentreOfMassxCallback'), Vehicle.setter('GetVehicleCentreOfMassxCallback'), vcb, 'group=Vehicle');

TwAddVarCB(mainBar, 'Center of Mass Y', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleCentreOfMassyCallback'), Vehicle.setter('GetVehicleCentreOfMassyCallback'), vcb, 'group=Vehicle');

TwAddVarCB(mainBar, 'Center of Mass Z', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleCentreOfMasszCallback'), Vehicle.setter('GetVehicleCentreOfMasszCallback'), vcb, 'group=Vehicle');

TwAddSeparator(mainBar, NULL, ' group=\'Vehicle\' ');

TwAddVarCB(mainBar, 'Inertia Multiplier X', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleInertiaMultiplierxCallback'), Vehicle.setter('GetVehicleInertiaMultiplierxCallback'), vcb, 'group=Vehicle');

TwAddVarCB(mainBar, 'Inertia Multiplier Y', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleInertiaMultiplieryCallback'), Vehicle.setter('GetVehicleInertiaMultiplieryCallback'), vcb, 'group=Vehicle');

TwAddVarCB(mainBar, 'Inertia Multiplier Z', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleInertiaMultiplierzCallback'), Vehicle.setter('GetVehicleInertiaMultiplierzCallback'), vcb, 'group=Vehicle');

TwAddSeparator(mainBar, NULL, ' group=\'Vehicle\' ');

TwAddVarCB(mainBar, 'Up Shift', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleUpShiftCallback'), Vehicle.setter('GetVehicleUpShiftCallback'), vcb, 'group=Vehicle');

TwAddVarCB(mainBar, 'Down Shift', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleDownShiftCallback'), Vehicle.setter('GetVehicleDownShiftCallback'), vcb, 'group=Vehicle');

TwAddVarCB(mainBar, 'Corner Grip', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleCornerGripCallback'), Vehicle.setter('GetVehicleCornerGripCallback'), vcb, 'group=Vehicle');

TwAddVarCB(mainBar, 'Line Grip', 'TW_TYPE_FLOAT', Vehicle.getter('SetVehicleLineGripCallback'), Vehicle.setter('GetVehicleLineGripCallback'), vcb, 'group=Vehicle');

TwSetParam(mainBar, 'Vehicle', 'opened', 'TW_PARAM_INT32', 1, 'vehicle_opened');

TwAddButton(mainBar, 'Teleport to Waypoint', Teleport.item('Waypoint'), NULL, 'group=Teleport help=\'In GTA: V, this will attempt to teleport you to the waypoint set on your map. You must set a waypoint first, BEFORE using this feature.\'');

TwAddButton(mainBar, 'Teleport to Objective', Teleport.item('MissionObj'), NULL, 'group=Teleport help=\'Will attempt to teleport you to the Mission Objective.\'');

TwAddSeparator(mainBar, NULL, ' group=\'Teleport\' ');

TwAddButton(mainBar, 'Save Custom Location 1', Teleport.item('TSaveCustomTP1'), NULL, 'group=Teleport');

TwAddButton(mainBar, 'Save Custom Location 2', Teleport.item('TSaveCustomTP2'), NULL, 'group=Teleport');

TwAddButton(mainBar, 'Save Custom Location 3', Teleport.item('TSaveCustomTP3'), NULL, 'group=Teleport');

TwAddButton(mainBar, 'Teleport to Custom Location 1', Teleport.item('TLoadCustomTP1'), NULL, 'group=Teleport');

TwAddButton(mainBar, 'Teleport to Custom Location 2', Teleport.item('TLoadCustomTP2'), NULL, 'group=Teleport');

TwAddButton(mainBar, 'Teleport to Custom Location 3', Teleport.item('TLoadCustomTP3'), NULL, 'group=Teleport');

TwAddSeparator(mainBar, NULL, ' group=\'Teleport\' ');

TwAddButton(mainBar, 'Teleport to LSC', Teleport.item('LSC'), NULL, 'group=Teleport help=\'Will attempt to teleport you to Los Santos Customs.\'');

TwSetParam(mainBar, 'Teleport', 'opened', 'TW_PARAM_INT32', 1, 'teleport_opened');

TwAddVarRW(mainBar, 'Menu Background Color', 'TW_TYPE_COLOR3F', 'barBgColor', ' label=\'Menu Background Color\' group=\'Menu Settings\' ');

TwAddButton(mainBar, 'Save & Apply Settings', 'fButtonPress', 'bSaveAndApplyMenuSettings', 'group=\'Menu Settings\' help=\'Save the all current settings to the configuration file and apply them now.\'');

TwDefine(' Authority/\'Menu Settings\'\u0009\u0009opened=false');

isTwInitialized = true;
