// Generated by CoffeeScript 1.10.0
var Clothing, Group, MainBar, NULL, OnlinePlayers, Player, Teleport, TwAdd, TwAddButton, TwAddSeparator, TwAddVarCB, TwAddVarRW, TwDefine, TwNewBar, TwSetParam, Vehicle, Weapon, isString, unquote,
  slice = [].slice,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

isString = function(s) {
  return toString.call(s) === '[object String]';
};

unquote = function(s) {
  var len;
  while (true) {
    len = s.length;
    if (s.length > 1 && s[0] === s[len - 1] && s[0] < 'A') {
      s = s.substring(1, len - 1);
    } else {
      return s;
    }
  }
};

NULL = null;

TwNewBar = (function() {
  TwNewBar.list = [];

  TwNewBar.add = function() {
    var __type, varargs;
    __type = arguments[0], varargs = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    return (this.list.push((function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(this, [this.list.length, __type].concat(slice.call(varargs)), function(){}))) - 1;
  };

  function TwNewBar(_id, _type1, o1, _title, b1, c1, d1, e1, f1, g1, h1, m1) {
    this._id = _id;
    this._type = _type1;
    this.o = o1;
    this._title = _title;
    this.b = b1;
    this.c = c1;
    this.d = d1;
    this.e = e1;
    this.f = f1;
    this.g = g1;
    this.h = h1;
    this.m = m1;
    if (this._title) {
      this.o.title = this._title;
    }
    if (this._type) {
      this.o.Type = this._type;
    }
    if (this.o && this.o.groupInstance && this.o.groupInstance.constructor) {
      this.o.groupInstance.add(this._type, this.o, this.b, this.c, this.d, this.e, this.f, this.g, this.m);
    }
  }

  return TwNewBar;

})();

Group = (function(superClass) {
  extend(Group, superClass);

  Group.list = [];

  Group.addQuiet = function(o) {
    return this.list.push(o);
  };

  Group.add = function(a, b, c, d, e, f, g, h, m) {
    return (this.list.push(new this(this.list.length, a, b, c, d, e, f, g, h, m))) - 1;
  };

  function Group(_id, a1, b1, c1, d1, e1, f1, g1, h1, m1) {
    this._id = _id;
    this.a = a1;
    this.b = b1;
    this.c = c1;
    this.d = d1;
    this.e = e1;
    this.f = f1;
    this.g = g1;
    this.h = h1;
    this.m = m1;
    this.list = [];
    if (this._id && this._id instanceof Object) {
      console.log("constructor adding", this._id);
      Group.getInstanceByClassName('MainBar').add('Menu', {
        Type: "Menu",
        title: this.constructor.name,
        menu: this
      });
    }
    this.addQuiet(this);
  }

  Group.prototype.add = function() {
    var _type, o, varargs;
    _type = arguments[0], o = arguments[1], varargs = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    return this.list.push(o);
  };

  Group.prototype.addQuiet = function(o) {
    return this.constructor.addQuiet(o);
  };

  Group.prototype.getName = function() {
    return this.constructor.name;
  };

  Group.getName = function() {
    return this.name;
  };

  Group.getter = function(v) {
    return "getclass=" + this.name + " getmethod=" + v;
  };

  Group.setter = function(v) {
    return "setclass=" + this.name + " setmethod=" + v;
  };

  Group.item = function(v) {
    return "itemclass=" + this.name + " itemmethod=" + v;
  };

  Group.getInstanceByClassName = function(className) {
    var i, len1, matches, name, ref;
    ref = this.list;
    for (i = 0, len1 = ref.length; i < len1; i++) {
      name = ref[i];
      if (name.getName() === className) {
        matches = name;
      }
    }
    return matches;
  };

  return Group;

})(TwNewBar);

MainBar = (function(superClass) {
  extend(MainBar, superClass);

  function MainBar() {
    return MainBar.__super__.constructor.apply(this, arguments);
  }

  return MainBar;

})(Group);

Player = (function(superClass) {
  extend(Player, superClass);

  function Player() {
    return Player.__super__.constructor.apply(this, arguments);
  }

  return Player;

})(Group);

OnlinePlayers = (function(superClass) {
  extend(OnlinePlayers, superClass);

  function OnlinePlayers() {
    return OnlinePlayers.__super__.constructor.apply(this, arguments);
  }

  return OnlinePlayers;

})(Group);

Clothing = (function(superClass) {
  extend(Clothing, superClass);

  function Clothing() {
    return Clothing.__super__.constructor.apply(this, arguments);
  }

  return Clothing;

})(Group);

Weapon = (function(superClass) {
  extend(Weapon, superClass);

  function Weapon() {
    return Weapon.__super__.constructor.apply(this, arguments);
  }

  return Weapon;

})(Group);

Vehicle = (function(superClass) {
  extend(Vehicle, superClass);

  function Vehicle() {
    return Vehicle.__super__.constructor.apply(this, arguments);
  }

  return Vehicle;

})(Group);

Teleport = (function(superClass) {
  extend(Teleport, superClass);

  function Teleport() {
    return Teleport.__super__.constructor.apply(this, arguments);
  }

  return Teleport;

})(Group);

window.TwNewBar = TwNewBar;

TwAdd = function() {
  var __type, args, chunk, i, id, k, key, len1, o, pair, split, val, value, varargs;
  __type = arguments[0], o = arguments[1], varargs = 3 <= arguments.length ? slice.call(arguments, 2) : [];
  args = {
    bar: o
  };
  for (key = i = 0, len1 = varargs.length; i < len1; key = ++i) {
    value = varargs[key];
    if (isString(value)) {
      varargs[key] = value.trim();
      split = value.split(/(group=| )/, 3);
      split = value.split(/(\w+=\w+|\w+='[^']+')/);
      while (split.length > 1) {
        chunk = split.shift().trim();
        if (!chunk) {
          continue;
        }
        if (indexOf.call(chunk, '=') >= 0) {
          pair = chunk.split('=');
          if (pair.length !== 2) {
            throw "Pair isn't two for " + chunk;
          }
          val = unquote(pair[1]);
          k = pair[0];
          args[k] = val;
          if (k === 'group') {
            args.groupInstance = Group.getInstanceByClassName(val);
          }
        }
      }
    }
  }
  return id = TwNewBar.add.apply(TwNewBar, [__type, args].concat(slice.call(varargs)));
};

TwAddVarCB = TwAdd.bind(null, 'VarCB');

TwAddVarRW = TwAdd.bind(null, 'VarRW');

TwAddButton = TwAdd.bind(null, 'Button');

TwAddSeparator = TwAdd.bind(null, 'Seperator');

TwSetParam = function() {};

TwDefine = function() {};


/*
 *


_.chain(Group.list)
  .map(function(list) {
    return list.constructor.name 
         + ": " 
         + Group
             .getInstanceByClassName( 
                list.constructor.name 
             )
             .list
             .length;
})
.value();

["OnlinePlayers: 5", "Player: 25", "Clothing: 61", "Weapon: 51", "Vehicle: 28"]
 */
