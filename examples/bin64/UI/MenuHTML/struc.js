// Generated by CoffeeScript 1.10.0
var Focus, ReadFile, StrucView, ValueHelper, adjustHeight, adjustHeightBouncy, getOrMake, grid, makeResizable, ord, query, superSizeMe;

query = function(request) {
  var request_id;
  if (request == null) {
    request = 'test';
  }
  return request_id = window.cefQuery({
    request: request,
    persistent: false,
    onSuccess: function(response) {
      console.log('OK');
    },
    onFailure: function(error_code, error_message) {
      console.log('Error');
    }
  });
};

Focus = (function() {
  function Focus() {
    this.focusClass = 'active';
    this.focusSelector = '.active';
    this.focusableSelector = '.struct-member-group:not(.seperator)';
    this.stack = [];
    this.activate();
    this.focusMenu();
  }

  Focus.prototype.activate = function() {
    var focus;
    focus = $(this.focusSelector);
    if (focus.length === 0) {
      focus = $(this.focusableSelector).first();
      focus.toggleClass(this.focusClass);
    }
    return focus;
  };

  Focus.prototype.getMenu = function(elem) {
    var menu;
    menu = $(elem).parents('.struct-main').andSelf().first();
    if (menu.length === 0) {
      return menu.length;
    }
    return menu;
  };

  Focus.prototype.set = function(target) {
    var focus, menu, newFocus, newMenu;
    focus = this.activate();
    menu = this.getMenu(focus);
    newFocus = $(target).parents().andSelf().filter(this.focusableSelector);
    if (newFocus.length === 0) {
      console.log("Couldn't newFocus on target", target);
      return newFocus;
    }
    newMenu = this.getMenu(newFocus);
    $(this.focusableSelector).removeClass(this.focusClass);
    newFocus.addClass(this.focusClass);
    if (!newMenu.is(menu)) {
      this.stack.push(focus);
      return this.focusMenu();
    } else {
      return this.deeper();
    }
  };

  Focus.prototype.focusMenu = function() {
    var focus, menu, menus;
    focus = this.activate();
    menus = $('.struct-main');
    menu = focus.parents('.struct-main').first();
    if (menu.length) {
      menu.addClass('active-menu');
      menus.not(menu).removeClass('active-menu');
      return $('.holder').packery('fit', menu[0], 0, 0);
    } else {
      return console.log("Couldn't find parent for focusMenu");
    }
  };

  Focus.prototype.nextprev = function(bForwards) {
    var focus, newFocus;
    if (bForwards == null) {
      bForwards = 1;
    }
    focus = this.activate();
    if (bForwards) {
      newFocus = focus.nextAll(this.focusableSelector).first();
    } else {
      newFocus = focus.prevAll(this.focusableSelector).first();
    }
    if (newFocus.length !== 0) {
      focus.toggleClass(this.focusClass);
      return newFocus.toggleClass(this.focusClass);
    }
  };

  Focus.prototype.deeper = function() {
    var focus, newFocus, nextInstance, nextMenu;
    focus = this.activate();
    console.log('focus', focus);
    nextInstance = Group.getInstanceByClassName(focus.parent().attr('id').replace('struct-', ''));
    if (!nextInstance) {
      return 0;
    }
    console.log('nextInstance', nextInstance);
    nextMenu = nextInstance.list[focus.children().data('id')];
    if (!nextMenu) {
      return 0;
    }
    console.log('nextMenu', nextMenu);
    newFocus = $(nextMenu.menu._elem).find(this.focusableSelector).first();
    if (!newFocus) {
      return 0;
    }
    console.log('newFocus', newFocus);
    if (newFocus.length !== 0) {
      this.stack.push(focus);
      focus.toggleClass(this.focusClass);
      newFocus.toggleClass(this.focusClass);
      this.focusMenu();
      return newFocus;
    }
    return 0;
  };

  Focus.prototype.shallower = function() {
    var focus, newFocus;
    focus = this.activate();
    newFocus = this.stack.pop();
    if (newFocus) {
      focus.removeClass(this.focusClass);
      newFocus.addClass(this.focusClass);
      this.focusMenu();
      $('.holder').packery();
      return newFocus;
    }
    return 0;
  };

  Focus.prototype.next = function() {
    return this.nextprev(1);
  };

  Focus.prototype.prev = function() {
    return this.nextprev(0);
  };

  Focus.prototype.right = function() {
    return this.deeper();
  };

  Focus.prototype.left = function() {
    return this.shallower();
  };

  return Focus;

})();

ValueHelper = (function() {
  ValueHelper._tristate = 0;

  ValueHelper.getTriState = function() {
    ++this._tristate;
    if (this._tristate > 2) {
      this._tristate = 0;
    }
    return this._tristate;
  };

  ValueHelper.makeHtml = function(type, value) {
    var cb, html, ts;
    if (type === 'Button') {
      return '';
    }
    if (type === 'Menu') {
      return "<div class=\"type\">\n  <div class=\"left\">\n  </div>\n  <div class=\"center\">\n    <i class=\"fa fa-chevron-circle-right\" aria-hidden=\"true\"></i>\n  </div>\n  <div class=\"right\">\n  </div>\n</div>";
      return '<i class="fa fa-chevron-circle-right" aria-hidden="true"></i>';
    }
    if (type === 'VarCB') {
      return "<div class=\"type\">\n  <div class=\"left\">\n    <i class=\"fa fa-angle-left\" aria-hidden=\"true\"></i>\n  </div>\n  <div class=\"center\">\n    1\n  </div>\n  <div class=\"right\">\n    <i class=\"fa fa-angle-right\" aria-hidden=\"true\"></i>\n  </div>\n</div>";
      return html;
    }
    if (type === 'VarRW') {
      ts = this.getTriState();
      cb = (function() {
        switch (false) {
          case ts !== 0:
            return '<i class="fa fa-circle-o" aria-hidden="true"></i>';
          case ts !== 1:
            return '<i class="fa fa-check-circle" aria-hidden="true"></i>';
          case ts !== 2:
            return '<i class="fa fa-times-circle-o" aria-hidden="true"></i>';
        }
      })();
      html = "<div class=\"type\">\n  <div class=\"left\">\n    <i class=\"fa fa-angle-left\" aria-hidden=\"true\"></i>\n  </div>\n  <div class=\"center\">\n    " + cb + "\n  </div>\n  <div class=\"right\">\n    <i class=\"fa fa-angle-right\" aria-hidden=\"true\"></i>\n  </div>\n</div>";
      return html;
    }
    return type;

    /*
    function output(state, value) {
        $('#expando-value').text(value);
    }
    
    $("##{value}").tristate({
        init:   output,
        change: output
    });
     */
  };

  ValueHelper.substr = function(buf, start, len) {
    var ar8tmp;
    ar8tmp = new Uint8Array(buf.buffer, start << 2, len);
    return String.fromCharCode.apply(null, ar8tmp);
  };

  ValueHelper.softHyphenate = function(w) {
    if (!_.isString(w)) {
      return '';
    }
    return w.replace(/([a-z])([A-Z])/g, "$1&shy;$2");
  };

  ValueHelper.arrayBuffer = function(ar321) {
    this.ar32 = ar321;
  };

  ValueHelper.offsetShr2 = function(offset) {
    return offset >> 2;
  };

  function ValueHelper(base) {
    this.base = base;
  }

  ValueHelper.prototype.getValue = function(member) {
    var Long, ar32, f, offset, value;
    Long = goog.math.Long;
    if (!_.isNumber(this.base)) {
      return;
    }
    offset = (this.base + member.offset) >> 2;
    ar32 = ValueHelper.ar32;
    f = member.flags;
    return value = (function() {
      switch (false) {
        case !Flags.isQword(f):
          return new goog.math.Long(ar32[offset], ar32[offset + 1]);
        case !Flags.isDword(f):
          return ar32[offset];
        case !Flags.isWord(f):
          return ar32[offset] & 0xffff;
        case !Flags.isByte(f):
          return ar32[offset] & 0xff;
        case !Flags.isFloat(f):
          return Struc.fl32[offset];
        case !Flags.isAscii(f):
          return ValueHelper.substr(ar32, offset, member.nbytes);
      }
    })();
  };

  ValueHelper.prototype.getFormattedValue = function(member) {
    var Long, formatted, offset, value;
    Long = goog.math.Long;
    value = this.getValue(member);
    if (_.isNumber(value) || value instanceof Long) {
      if (Flags.isFloat(member.flags)) {
        return trimFloat(value, 5);
      }
      formatted = value.toString(16);
      if (value instanceof Long) {
        if (value.isNegative()) {
          formatted = longhex(value);
        }
        if (value.greaterThanOrEqual(Struc.base) && value.lessThan(Struc.end)) {
          offset = value.subtract(Struc.base);
          formatted = "C";
          if (!offset.isNegative()) {
            formatted += "+";
          }
          formatted += offset.toString(16);
        }
      }
    } else if (_.isString(value)) {
      return value;
    } else if (!value) {
      formatted = '';
    } else {
      formatted = toString.call(value) + " " + value;
    }
    return formatted;
  };

  return ValueHelper;

})();

getOrMake = function(elemQuery) {
  var h, s;
  h = $(elemQuery);
  if (h.length > 0) {
    return h;
  }
  s = elemQuery.split(/([^\w-])/);
  return window['$' + s.shift()](s.join('')).appendTo('body');
};

ord = function(char) {
  return char[0].charCodeAt(0);
};

window.menuFocus = new Focus;

$(document).keydown(function(ev) {
  var $active, member, memberId, name, structId, type;
  switch (ev.which) {
    case ord('Y'):
      $active = $('.active');
      if (!$active.length) {
        console.log("No active member");
        return false;
      }
      memberId = $active.data('id');
      structId = $active.parents('.struct-main').data('id');
      member = Struc.list[structId].members[memberId];
      type = member._type;
      name = member.name;
      Dialog.Form('Change name/type', type, name, function(answer) {
        return SetType(member, answer);
      });
      return false;
    case 74:
    case 40:
      menuFocus.next();
      return false;
    case 75:
    case 38:
      menuFocus.prev();
      return false;
    case 76:
    case 39:
    case 13:
      menuFocus.right();
      return false;
    case 37:
    case 72:
    case 8:
    case 27:
      menuFocus.left();
      break;
    default:
      console.log('Unhandled keystroke, ignoring: ', ev.which);
      return;
  }
});

StrucView = (function() {
  StrucView.style = "@import url(\"font-awesome-4.6.3/css/font-awesome.css\");\n.struct-head {\n    /* display: table-row; */\n    color: white;\n    background-color: darkgoldenrod;\n    /* margin: -10px; */\n    padding: 10px;\n    margin-bottom: 10px;\n}\n\n.struct-head > .offset {\n    font-family: Consolas;\n    line-height: 1.1em;\n    float: right;\n}\n\na {\n    /* text-decoration: none; */\n    color: #f8f8f8;\n}\n\n.struct-main {\n    visibility: hidden;\n}\n\n.struct-main.active-menu {\n    visibility: visible;\n    background: hsl(205, 100%, 40%);\n}\n\n\n.struct-member-group:hover {\n    background-color: hsl(205, 100%, 40%);\n}\n\n.struct-member-group.active {\n    background-color: hsl(205, 100%, 35%);\n}\n\n.type > div {\n    display: inline-block;\n    padding: 1px 0px;\n}\n\n.type > .left {\n    visibility: hidden;\n}\n\n.type > .center {\n    min-width: 1em;\n    text-align: center;\n}\n\n.type > .right {\n    visibility: hidden;\n    padding-right: 3px;\n    margin-right: 0;\n}\n\n.struct-member-group.active .type > div {\n    visibility: visible;\n}\n\n.struct-main.active-menu .struct-member-group:hover\n{\n    background: hsl(205, 100%, 32%);\n}\n\n.struct-main.active-menu .struct-member-group.active\n{\n    background: hsl(205, 100%, 27%);\n}\n\n.struct-head:hover {\n    border-color: hsla(0, 0%, 100%, 0.5);\n    cursor: move;\n}\n\n.struct-main.is-dragging,\n.struct-main.ui-draggable-dragging,\n.struct-main.is-positioning-post-drag {\n    background: #c90;\n    z-index: 2;\n}\n\n.holder .packery-drop-placeholder {\n    outline: 3px dashed hsla(0, 0%, 0%, 0.5);\n    outline-offset: -6px;\n    -webkit-transition: -webkit-transform 0.2s;\n            transition: transform 0.2s;\n}\n\n.struct-main {\n    /* padding: 10px; */\n    color: #F8F8F8;\n    background: #09c;\n    display: inline-block;\n    /* padding: 10px; */\n    /* margin: 5px; */\n    /* vertical-align: top; */\n    /* width: 300px; */\n    /* float: right; */\n    box-sizing: border-box;\n    /* float: left; */\n    /* background: #f1ede2; */\n    /* font-size: 1.2rem; */\n}\n\n\nbody {\n  font-family: sans-serif, Consolas, Lucidia Console, Menlo;\n  font-size: 16pt;\n  background-color: transparent;\n  background-image: none;\n\n}\n\ndiv.struct-main {\ndisplay: inline-block;\nwidth: 390px;\nmargin: 5px;\nbackground: #09c;\n}\n\n.struct-head {\ndisplay: block;\n}\n\n.struct-member-group {\ndisplay: block;\npadding-right: 5px;\npadding: 3px 5px;\ncursor: pointer;\n-webkit-user-select: none;\n}\n\n.struct-member {\ndisplay: block;\n}\n\n.struct-member > div {\ndisplay: block;\n}\n\n.struct-member > .type {\nfloat: right;\n}\n\n.struct-member > .name {\ndisplay: none;\n}\n\n\n.struct-member-group {\ndisplay: block;\npadding: 9px 0px 9px 15px;\nwidth: auto;\n}\n.struct-member-group.seperator {\nbackground-color: white;\nheight: 1px;\npadding: 0;\n}\n\n.struct-member-group.seperator > div {\ndisplay: none;\n}\n\n.struct-head {\nfont-weight: bold;\nmargin: 5px 5px;\npadding: 12px 10px;\n}\n\nbody {\nbackground-color: transparent;\n}\n";

  function StrucView(strucClass) {
    var i, len1, paint, ref, struct;
    this.holder = getOrMake('div.holder');
    ref = Group.list;
    for (i = 0, len1 = ref.length; i < len1; i++) {
      struct = ref[i];
      if (!(struct instanceof Group)) {
        console.log("wtf is this not-Struc", struct);
      }
      paint = function(struct) {
        var $holder, _struct, draggie, elem, id, j, len2, member, n, ref1, sm, split, star, structMain;
        if (!(struct instanceof Group)) {
          console.log("wtf1` is this not-Struc", struct);
        }
        $holder = $('.holder');
        structMain = getOrMake('div.struct-main#struct-' + struct.constructor.name).attr('data-id', struct.index);
        structMain.children().remove();
        structMain.append($div('.struct-head').append($div('.name').text(struct.constructor.name)));
        ref1 = struct.list;
        for (id = j = 0, len2 = ref1.length; j < len2; id = ++j) {
          member = ref1[id];
          structMain.append($div('.struct-member-group').append(sm = $div('.struct-member').attr('data-id', id).click(function(event) {
            var el, elem;
            console.log(".click event", event);
            elem = event.target;
            el = menuFocus.set(elem);
            return console.log('focus', el);
          }).append($div('.type').html(ValueHelper.makeHtml(n = member.Type, (member.title ? member.title : "").replace(/ /g, '-')))).append($div('.name').html(ValueHelper.softHyphenate(member.name))).append($div('.value').text(member.title))));
          if (n === 'Seperator') {
            sm.parent().addClass('seperator');
          }
          if (0 && n) {
            split = n.split(' ');
            star = split[n.length - 1];
            n = split[0];
            _struct = Struc.getStrucByName(n);
            if (_struct) {
              console.log("Matched _struct " + n);
              structMain.children().last().children('.type').wrap($a('.inter-class-target').attr('href', '#_struct-' + n));
            }
            if (v) {
              if (_struct = Struc.getStrucByName(n)) {
                if (v[0] === 'C' && v[1] === '+') {
                  if (!_struct._offset) {
                    _struct.offset(parseInt(v.substr(2), 16));
                  }
                }
              }
            }
          }
        }
        if (!struct._elem) {
          $('.holder').packery().append(structMain).packery('appended', structMain);
          elem = superSizeMe(0, structMain);
          makeResizable(elem);
          draggie = new Draggabilly(elem, {
            handle: ".struct-head"
          });
          $('.holder').packery('bindDraggabillyEvents', draggie);
          return struct._elem = structMain[0];
        } else {
          return $('.holder').packery('fit', structMain[0]);
        }
      };
      if (!(struct instanceof Group)) {
        console.log("wtf2` is this not-Group", struct);
      }
      struct.onPaint = paint.bind(this, struct);
      struct.onPaint();
    }
  }

  return StrucView;

})();

ReadFile = (function() {
  function ReadFile(element, onload) {
    $(element).change((function(_this) {
      return function() {
        var fr, input;
        input = document.getElementsByTagName('input')[0];
        if (input.files.length === 0) {
          console.log("0length");
          return;
        }
        fr = new FileReader;
        fr.onload = function() {
          var ar32;
          console.log("Loaded");
          ValueHelper.arrayBuffer(ar32 = new Uint32Array(fr.result));
          console.log("into Uint32array");
          if (onload) {
            onload(ar32);
          }
        };
        fr.readAsArrayBuffer($(element)[0].files[0]);
        $(element).fadeOut();
      };
    })(this));
  }

  return ReadFile;

})();

grid = function(size) {
  return size = Math.ceil(size / 100) * 100 - 10;
};

makeResizable = function(selector) {
  return interact(selector).resizable({
    preserveAspectRatio: false,
    edges: {
      left: true,
      right: true,
      bottom: true,
      top: true
    }
  }).on('resizemove', function(event) {
    var target, x, y;
    target = event.target;
    x = parseFloat(target.getAttribute('data-x')) || 0;
    y = parseFloat(target.getAttribute('data-y')) || 0;
    target.style.width = grid(event.rect.width) + 'px';
    target.style.height = event.rect.height + 'px';
    x += event.deltaRect.left;
    y += event.deltaRect.top;
    target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px,' + y + 'px)';
    target.setAttribute('data-x', x);
    target.setAttribute('data-y', y);
    $(target).trigger('resize');
  });
};

adjustHeightBouncy = function(event) {
  var $this, height, hfactor;
  hfactor = 25;
  $this = $(event.target);
  height = array_sum($this.children().map(function(k, v) {
    return v.offsetHeight;
  }).get()) + 30;
  height /= hfactor;
  height = Math.ceil(height) * hfactor - 10;
  $this.css('height', height + 'px');
  return $('.holder').packery('shiftLayout', $this);
};

adjustHeight = _.debounce(adjustHeightBouncy, 200);

superSizeMe = function(__, elem) {
  var $this;
  $this = $(elem);
  $this.on('resize', adjustHeight);
  $this.trigger('resize');
  return $this[0];
};

$('.holder').remove();

$('input').remove();

$('style').remove();

$('script').remove();

$('<style>').text(StrucView.style).appendTo('head');

$('<script>').appendTo('head');

$(function() {
  var sv;
  goog.require("goog.math.Long");
  window['sv'] = sv = new StrucView;
  sv.holder.packery({
    itemSelector: ".struct-main"
  });
  menuFocus.activate();
  menuFocus.focusMenu();
  setTimeout(menuFocus.focusMenu.bind(menuFocus), 2000);
  return setTimeout(function() {
    return $('.tristate').tristate();
  }, 1000);
});


/*
 *
 * Tri-state (indeterminite) checkboxes
 *
 * <i class="fa fa-square-o" aria-hidden="true"></i>
 * <i class="fa fa-check-square-o" aria-hidden="true"></i>
 * <i class="fa fa-minus-square-o" aria-hidden="true"></i>
 */
